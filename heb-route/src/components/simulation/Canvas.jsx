import { useEffect, useState, useRef } from 'react';

let preDone = false;
const adjListPath = {};
    const route = [];
    const nextPassBy = [];
    const previousPath = [];
    const pathSize = 0.5;
    const colors = {
        0: 'black',
        1: 'navy',
        2: 'grey',
        5: 'red',
        6: 'green',
        7: 'orange'
    }
    const tileMap = {
        0: 'limit',
        1: 'rack',
        2: 'corridor',
        3: 'outOfLimits',
        4: 'path',
        5: 'actualPath',
        6: 'start',
        7: 'end'
    };
    let passBy;
    let start = 1;
    let prevTileSize = 0;
    let timeOut;

    const map = [
        [],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0],

        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, -141, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, -93, 2, 1, 1, 1, 2, -97, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, -45, 4, 4, 4, 4, -44, 4, 4, 4, 4, -43, 4, 4, -132, 4, 4, 4, 4, 4, -133, 4, 4, 4, 4, 4, -134, 4, 4, 4, 4, 4, -135, 4, 4, 4, 4, 4, -136, 4, 4, 4, 4, 4, -137, 4, 4, 4, 4, 4, -138, 4, 4, 4, 4, 4, -139, 4, 4, 4, 4, 4, 4, 4, 4, -140, 4, 4, 4, 4, 4, 4, 4, 4, -154, 4, 4, 4, 4, 4, -153, 4, 4, 4, 4, 4, -152, 4, 4, 4, 4, 4, -151, 4, 4, 4, 4, 4, -150, 4, 4, 4, 4, 4, -149, 4, 4, 4, 4, 4, 4, 4, 4, -92, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, -131, 4, 4, -130, 4, 4, -129, 4, 4, -128, 4, 4, -127, 4, 4, -126, 4, 4, -125, 4, 4, -124, 4, 4, -123, 4, 4, -122, 4, 4, -121, 4, 4, -120, 4, 4, -119, 4, 4, -118, 4, 4, -117, 4, 4, -116, 4, 4, -115, 4, 4, -114, 4, 4, -113, 4, 4, -112, 4, 4, -111, 4, 4, -110, 4, 4, -109, 4, 4, -108, 4, 4, -107, 4, 4, -106, 4, 4, -105, 4, 4, -104, 4, 4, -103, 4, 4, -102, 4, 4, -101, 4, 4, -100, 4, 4, -99, 4, 4, -91, 2, 1, 1, 1, 2, -98, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, -46, 2, 1, 1, 1, 1, 1, 1, 1, 2, -42, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, -157, 2, 1, 1, 1, 2, -160, 2, 1, 1, 1, 2, -163, 2, 1, 1, 1, 2, -166, 2, 1, 1, 1, 2, -169, 2, 1, 1, 1, 2, -172, 2, 1, 1, 1, 2, -175, 2, 1, 1, 1, 2, -178, 2, 1, 1, 1, 2, -181, 2, 1, 1, 1, 2, -184, 2, 1, 1, 1, 2, -187, 2, 1, 1, 1, 2, -190, 2, 1, 1, 1, 2, -193, 2, 1, 1, 1, 2, -196, 2, 1, 1, 1, 2, -200, 2, 1, 1, 1, 2, -204, 2, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, -90, 4, 4, -88, 4, 4, -89, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, -199, 2, 1, 1, 1, 2, -203, 2, 1, 1, 1, 2, -87, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, -47, 4, 4, 4, 4, -49, 4, 4, 4, 4, -41, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, -86, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, -156, 2, 1, 1, 1, 2, -159, 2, 1, 1, 1, 2, -162, 2, 1, 1, 1, 2, -165, 2, 1, 1, 1, 2, -168, 2, 1, 1, 1, 2, -171, 2, 1, 1, 1, 2, -174, 2, 1, 1, 1, 2, -177, 2, 1, 1, 1, 2, -180, 2, 1, 1, 1, 2, -183, 2, 1, 1, 1, 2, -186, 2, 1, 1, 1, 2, -189, 2, 1, 1, 1, 2, -192, 2, 1, 1, 1, 2, -195, 2, 1, 1, 1, 2, -198, 4, 4, -201, 4, 4, -202, 4, 4, -205, 4, 4, -85, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 4, 2, 1, 1, 0],
        [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 1, 1, 2, -48, 2, 1, 1, 1, 1, 1, 1, 1, 2, -40, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, -197, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, -83, 4, 4, 4, 4, 4, -84, 2, 1, 1, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, -155, 2, 1, 1, 1, 2, -158, 2, 1, 1, 1, 2, -161, 2, 1, 1, 1, 2, -164, 2, 1, 1, 1, 2, -167, 2, 1, 1, 1, 2, -170, 2, 1, 1, 1, 2, -173, 2, 1, 1, 1, 2, -176, 2, 1, 1, 1, 2, -179, 2, 1, 1, 1, 2, -182, 2, 1, 1, 1, 2, -185, 2, 1, 1, 1, 2, -188, 2, 1, 1, 1, 2, -191, 2, 1, 1, 1, 2, -194, 2, 1, 1, 1, 2, -80, 4, 4, 4, 4, 4, -81, 4, 4, 4, 4, 4, -82, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0],
        [0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0],
        [0, 0, 1, 1, 2, -29, 4, 4, 4, 4, -30, 4, 4, 4, 4, -31, 4, 4, 4, 4, -32, 4, 4, 4, 4, -33, 4, 4, 4, 4, -34, 4, 4, -35, 4, 4, 4, 4, -36, 4, 4, 4, 4, -39, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0],
        [0, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, -27, 4, 4, 4, 4, -26, 4, 4, 4, 4, -25, 4, 4, 4, 4, -24, 4, 4, 4, 4, -23, 4, 4, 4, 4, -22, 4, 4, 4, 4, 4, 4, 4, -37, 4, 4, 4, 4, -38, 4, 4, -50, 4, 4, -51, 4, 4, -52, 4, 4, -53, 4, 4, -54, 4, 4, -55, 4, 4, -56, 4, 4, -57, 4, 4, -58, 4, 4, -59, 4, 4, -60, 4, 4, -61, 4, 4, -62, 4, 4, -63, 4, 4, -64, 4, 4, -65, 4, 4, -66, 4, 4, -67, 4, 4, -68, 4, 4, -69, 4, 4, -70, 4, 4, -71, 4, 4, -72, 4, 4, -73, 4, 4, -74, 4, 4, -75, 4, 4, -76, 4, 4, -77, 4, 4, -78, 4, 4, -79, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, -28, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, -21, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 4, 4, 4, 4, -16, 4, 4, 4, 4, -17, 4, 4, 4, 4, -18, 4, 4, 4, 4, -19, 4, 4, 4, 4, -20, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, -9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 4, 4, 4, 4, -10, 4, 4, 4, 4, -11, 4, 4, 4, 4, -12, 4, 4, 4, 4, -13, 4, 4, 4, 4, -14, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0],
        [0, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 2, -8, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, -15, 4, 4, -1, 4, 4, 4, 4, 4, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [0, 0, 1, 1, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [0, 0, 1, 1, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [0, 0, 1, 1, 2, -7, 4, 4, 4, 4, -6, 4, 4, 4, 4, -5, 4, 4, 4, 4, -4, 4, 4, 4, 4, -3, 4, 4, 4, 4, -2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    ];

    const inf = 1e4;
    const delta = [1, -1, 0, 0, 0, 0, -1, 1];

    const maxNode = -Math.min(...map.flat()) + 1;
    const parent = new Array(maxNode).fill(0).map(() => new Array(maxNode).fill(0));
    const adjMatrix = new Array(maxNode).fill(inf).map(() => new Array(maxNode).fill(inf));
    const visited = new Array(map.length).fill(inf).map(() => new Array(map[1].length).fill(inf));
    for (let i = 1; i < maxNode; i++) {
        adjListPath[i] = {};
    }

    const posNodes = new Array(maxNode).fill([]);
    
    function removeVisited(i, j, visited) {
        visited[i][j] = inf;
        for (let k = 0; k < 4; k++) {
            const x = i + delta[k];
            const y = j + delta[k + 4];
            if (map[x][y] < 0) {
                visited[x][y] = inf;
            }
            if (visited[x][y] < inf && map[x][y] === 4) {
                removeVisited(x, y, visited);
            }
        }   
    }

    function searchAll(startX, startY, i, j, x, y, visited, dist) {
        if (dist + 1 <= visited[x][y]) {
            visited[x][y] = dist + 1;
            if (map[x][y] < 0 && dist + 1 < adjMatrix[-map[startX][startY]][-map[x][y]]) {
                adjMatrix[-map[startX][startY]][-map[x][y]] = dist + 1;
                adjListPath[-map[x][y]][-map[startX][startY]] = [[i, j]];
                return -map[x][y];
            }
            if (map[x][y] === 4) {
                const node = dfs(startX, startY, x, y, visited, dist + 1);
                if (node) {
                    adjListPath[node][-map[startX][startY]].push([i, j]);
                    return node;
                }
            }
        }
    }

    function dfs(startX, startY, i, j, visited, dist) {
        visited[i][j] = dist;
        for (let k = 0; k < 4; k++) {
            const x = i + delta[k];
            const y = j + delta[k + 4];
            const res = searchAll(startX, startY, i, j, x, y, visited, dist);
            if (res) {
                return res;
            }
        }
        return 0;
    }

    function calcGraph() {
        for (let i = 1; i < map.length; i++) {
            for (let j = 1; j < map[i].length; j++) {
                if (map[i][j] < 0) {
                    posNodes[-map[i][j]] = [i, j];
                    adjMatrix[-map[i][j]][-map[i][j]] = 0;
                    while(dfs(i, j, i, j, visited, 0));
                    removeVisited(i, j, visited);
                }
            }
        }
    }

    function Floyd_Warshall() {
        for (let i = 1; i < adjMatrix.length; i++) {
            for (let j = 1; j < adjMatrix.length; j++) {
                parent[i][j] = i;
            }
        }

        for (let k = 1; k < adjMatrix.length; k++) {
            for (let i = 1; i < adjMatrix.length; i++) {
                for (let j = 1; j < adjMatrix.length; j++) {
                    if (adjMatrix[i][k] + adjMatrix[k][j] < adjMatrix[i][j]) {
                        adjMatrix[i][j] = adjMatrix[i][k] + adjMatrix[k][j];
                        parent[i][j] = parent[k][j];
                    }
                }
            }
        }
    };

    function getRouteAux(i, j, begin) {
        if (j !== begin) {
            route.push(j);
        }
        if (i != j) {
            getRouteAux(i, parent[i][j], begin);
        }
    };

    function getRoute(nodeQueue) {
        passBy = [...nodeQueue];
        let index;
        let begin = start;
        while (passBy.length) {
            let minDist = inf;
            index = -1;
            for (let i = 0; i < passBy.length; i++) {
                if (adjMatrix[begin][passBy[i]] < minDist) {
                    minDist = adjMatrix[begin][passBy[i]];
                    index = i;
                }   
            }
            nextPassBy.push(passBy[index]);
            getRouteAux(passBy[index], begin, begin);
            begin = passBy[index];
            passBy.splice(index, 1);
        }
        route.reverse();
        nextPassBy.reverse();
    };

    function preSimulate(nodeQueue) {
        calcGraph();    
        Floyd_Warshall();
        getRoute(nodeQueue);
    }

const Canvas = ({ nodeQueue, handleChange, width, height }) => {
    const [tileSize, setTileSize] = useState(0);
    const canvasRef = useRef(null);
    
    function drawImage(context, num, x, y, tileSize, isPath) {
        context.fillStyle = colors[num];
        if (isPath) {
            context.fillRect(
                Math.ceil((y - 1 - 0.75) * tileSize),
                Math.ceil((x - 1 - 0.75) * tileSize),
                Math.floor(2.5 * tileSize),
                Math.floor(2.5 * tileSize)
            );
        }
        else {
            context.fillRect(
                (y - 1) * tileSize, 
                (x - 1) * tileSize, 
                tileSize, 
                tileSize
            );
        }
    }
    
    const draw = (context, tileSize) => {   
        for (let x = 1; x < map.length; x++) {
            for (let y = 1; y < map[x].length; y++) {
                if (map[x][y] < 0 || map[x][y] >= 4) {
                    map[x][y] = 2;
                }
                if (map[x][y] != 3) {
                    drawImage(context, map[x][y], x, y, tileSize, 0);
                }
            }
        }
    }

    function clearCanvas(context, canvas) {
        context.clearRect(0, 0, canvas.width, canvas.height);
    }

    function nextNode(context, tileSize) {
        while (previousPath.length) {
            const x = previousPath[previousPath.length - 1][0];
            const y = previousPath[previousPath.length - 1][1];
            map[x][y] = 2;
            drawImage(context, 2, x, y, tileSize, pathSize);
            previousPath.pop();
        }

        if (route.length) {
            previousPath.push([posNodes[start][0], posNodes[start][1]]);

            const begin = start;

            while (start !== nextPassBy.at(-1)) {
                const next = route.at(-1);
                for (let i = 0; i < adjListPath[start][next].length; i++) {
                    const x = adjListPath[start][next][i][0];
                    const y = adjListPath[start][next][i][1];
                    previousPath.push([x, y]);
                    map[x][y] = 5;
                    drawImage(context, 5, x, y, tileSize, pathSize);
                }
                start = next;
                route.pop();
            }

            map[posNodes[begin][0]][posNodes[begin][1]] = 6;
            drawImage(context, 6, posNodes[begin][0], posNodes[begin][1], tileSize, pathSize);

            nextPassBy.pop();
            map[posNodes[start][0]][posNodes[start][1]] = 7;
            drawImage(context, 7, posNodes[start][0], posNodes[start][1], tileSize, pathSize);
        }   
        else console.log("¡Terminaste con tu lista de compras!");
    }

    // Init: load canvas and map
    useEffect(() => {
        if (canvasRef.current.width == width) {
            return;
        }
        if (!preDone) {
            preSimulate(nodeQueue);
            handleChange([...nextPassBy]);
            preDone = true;
        }

        clearTimeout(timeOut);
        timeOut = setTimeout(() => {}, 150);

        const canvas = canvasRef.current;
        const context = canvas.getContext('2d');
        //const { devicePixelRatio: ratio = 1 } = window;

        const availableWidth = width;
        const availableHeight = height;

        const numRows = map.length - 1;
        const numCols = map[1].length;

        const tileSizeWidth = Math.floor(availableWidth / numCols);
        const tileSizeHeight = Math.floor(availableHeight / numRows);
        const auxTileSize = Math.min(tileSizeWidth, tileSizeHeight);

        if (tileSize !== auxTileSize) {
            const scaledWidth = numCols * auxTileSize;
            const scaledHeight = numRows * auxTileSize;

            canvas.width = scaledWidth;
            canvas.height = scaledHeight;

            //context.scale(ratio, ratio);
        
            clearCanvas(context, canvas);
            draw(context, auxTileSize);

            setTileSize(auxTileSize);
        }
    }, [width, height]);

    useEffect (() => {
        
        if (!tileSize || (nodeQueue.length && map[posNodes[nodeQueue.at(-1)][0]][posNodes[nodeQueue.at(-1)][1]] === 7)) {
            return;
        }
        // When resizing, redraw path without advancing to next node
        if (prevTileSize && tileSize != prevTileSize) {
            const context = canvasRef.current.getContext('2d');

            for (let i = 1; i < previousPath.length - 1; i++) {
                const x = previousPath[i][0];
                const y = previousPath[i][1];
                map[x][y] = 5;
                drawImage(context, 5, x, y, tileSize, pathSize);
            }

            map[previousPath[0][0]][previousPath[0][1]] = 6;
            drawImage(context, 6, previousPath[0][0], previousPath[0][1], tileSize, pathSize);
            map[previousPath[previousPath.length - 1][0]][previousPath[previousPath.length - 1][1]] = 7;
            drawImage(context, 7, previousPath[previousPath.length - 1][0], previousPath[previousPath.length - 1][1], tileSize, pathSize);
            
            prevTileSize = tileSize;
            return;
        }

        prevTileSize = tileSize;
        nextNode(canvasRef.current.getContext('2d'), tileSize);
    }, [nodeQueue, tileSize]);
    
    return <canvas ref={canvasRef} />;
};

export default Canvas;
